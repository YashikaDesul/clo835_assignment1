name: Build, Test, and Publish Image to ECR

on: 
  push:
    branches: [ dev ]
  workflow_dispatch:  # Enables manual trigger

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Cleanup Docker Containers
      run: |
        CONTAINERS=$(docker ps -aq)
        if [ -n "$CONTAINERS" ]; then
          docker stop $CONTAINERS
          docker rm $CONTAINERS
        fi
        docker network rm my_app_network || true
        docker rmi $(docker images -q) || true

    - name: Build MySQL Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mysql_repo
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker build -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}" -f Dockerfile_mysql .
        docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}"

    - name: Build WebApp Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: webapp_repo
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker build -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}" -f Dockerfile .
        docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}"

    - name: Test MySQL
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mysql_repo
        IMAGE_TAG: ${{ github.run_number }}
        DBPASS: pw
        DBUSER: ${{ secrets.DBUSER }}
      run: |
        docker network create my_app_network || true
        docker run -d --name my_db --network my_app_network -e MYSQL_ROOT_PASSWORD=$DBPASS "${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}"
        until docker exec my_db mysqladmin -u root -p$DBPASS ping --silent; do
          echo "Waiting for MySQL connection..."
          sleep 30
        done

    - name: Test WebApp
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: webapp_repo
        IMAGE_TAG: ${{ github.run_number }}
        DBPASS: ${{ secrets.DBPASS }}
        DBUSER: ${{ secrets.DBUSER }}
      run: |
        echo DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks.my_app_network.IPAddress}}' my_db)
        export DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks.my_app_network.IPAddress}}' my_db)
        export DBPORT=3306
        export DBUSER=root
        export DATABASE=employees
        export DBPWD=pw
        
        docker run -d -p 8081:8080 -e APP_COLOR=$APP_COLOR -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD --name blue ${ECR_REGISTRY}/${ECR_REPOSITORY}:v16
        docker run -d -p 8082:8080 -e APP_COLOR=$APP_COLOR -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD --name blue_app ${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}
        docker run -d -p 8083:8080 -e APP_COLOR=$APP_COLOR -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD --name blue_app_v2 ${ECR_REGISTRY}/${ECR_REPOSITORY}:v${IMAGE_TAG}

        echo "Waiting for the application to start..."
        sleep 60
        
        echo "Checking container statuses..."
        docker ps

        echo "Checking logs for blue container..."
        docker logs blue

        echo "Checking logs for blue_app container..."
        docker logs blue_app

        echo "Checking logs for blue_app_v2 container..."
        docker logs blue_app_v2

        echo "Testing connection to port 8081..."
        curl -I localhost:8081 || true  # Allow the script to continue even if curl fails

        echo "Testing connection to port 8082..."
        curl -I localhost:8082 || true  # Allow the script to continue even if curl fails

        echo "Testing connection to port 8083..."
        curl -I localhost:8083 || true  # Allow the script to continue even if curl fails

    - name: Create Pull Request to Prod
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh pr create -B prod -H dev --title 'Merge dev into prod' --body 'Update changes - by Github action'
